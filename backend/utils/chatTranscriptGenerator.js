const fs = require('fs');
const path = require('path');
const PDFDocument = require('pdfkit');
const Chat = require('../models/Chat');
const User = require('../models/User');

// Create transcripts directory if it doesn't exist
const transcriptsDir = path.join(__dirname, '../uploads/transcripts');
if (!fs.existsSync(transcriptsDir)) {
  fs.mkdirSync(transcriptsDir, { recursive: true });
}

/**
 * Generate a chat transcript as a PDF file
 * @param {string} userId1 - First user ID
 * @param {string} userId2 - Second user ID
 * @param {number} messageLimit - Number of recent messages to include (default: 50)
 * @returns {Promise<string>} - Path to the generated PDF file
 */
const generateChatTranscriptPDF = async (userId1, userId2, messageLimit = 50) => {
  try {
    console.log(`üìÑ Generating chat transcript PDF for users: ${userId1} and ${userId2}`);
    
    // Get user details
    const [user1, user2] = await Promise.all([
      User.findById(userId1).select('fname lname username email gender'),
      User.findById(userId2).select('fname lname username email gender')
    ]);

    if (!user1 || !user2) {
      throw new Error('Users not found');
    }

    // Get chat messages
    const messages = await Chat.find({
      $or: [
        { senderId: userId1, receiverId: userId2 },
        { senderId: userId2, receiverId: userId1 }
      ]
    })
    .populate('senderId', 'fname lname username')
    .populate('receiverId', 'fname lname username')
    .sort({ created: -1 })
    .limit(messageLimit);

    // Reverse to show oldest first
    messages.reverse();

    // Generate filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `chat-transcript-${user1.username}-${user2.username}-${timestamp}.pdf`;
    const filePath = path.join(transcriptsDir, filename);

    // Create PDF document
    const doc = new PDFDocument({ margin: 50 });
    doc.pipe(fs.createWriteStream(filePath));

    // Header
    doc.fontSize(20).text('Quluub Chat Transcript', { align: 'center' });
    doc.fontSize(12).text('Islamic Marriage Platform - Wali Supervision Report', { align: 'center' });
    doc.moveDown(2);

    // Participants info
    doc.fontSize(14).text('Participants:', { underline: true });
    doc.fontSize(12);
    doc.text(`‚Ä¢ ${user1.fname} ${user1.lname} (@${user1.username}) - ${user1.gender}`);
    doc.text(`‚Ä¢ ${user2.fname} ${user2.lname} (@${user2.username}) - ${user2.gender}`);
    doc.moveDown();

    // Report details
    doc.text(`Report Generated: ${new Date().toLocaleString()}`);
    doc.text(`Total Messages: ${messages.length}`);
    doc.text(`Message Limit: Last ${messageLimit} messages`);
    doc.moveDown(2);

    // Islamic compliance notice
    doc.fontSize(10);
    doc.fillColor('green');
    doc.text('üõ°Ô∏è Islamic Compliance Notice: This conversation has been monitored to ensure adherence to Islamic values and proper supervision.', {
      width: 500,
      align: 'justify'
    });
    doc.fillColor('black');
    doc.moveDown(2);

    // Messages
    doc.fontSize(14).text('Conversation:', { underline: true });
    doc.moveDown();

    if (messages.length === 0) {
      doc.fontSize(12).text('No messages found in this conversation.', { style: 'italic' });
    } else {
      messages.forEach((message, index) => {
        const sender = message.senderId;
        const timestamp = new Date(message.created).toLocaleString();
        
        // Check if we need a new page
        if (doc.y > 700) {
          doc.addPage();
        }

        // Message header
        doc.fontSize(10);
        doc.fillColor('gray');
        doc.text(`[${timestamp}] ${sender.fname} ${sender.lname} (@${sender.username}):`, {
          continued: false
        });
        
        // Message content
        doc.fontSize(11);
        doc.fillColor('black');
        doc.text(message.message, {
          indent: 20,
          width: 480
        });
        doc.moveDown(0.5);
      });
    }

    // Footer
    doc.addPage();
    doc.fontSize(10);
    doc.fillColor('gray');
    doc.text('This report was automatically generated by Quluub Islamic Marriage Platform', {
      align: 'center'
    });
    doc.text('For Wali/Guardian supervision and Islamic compliance purposes', {
      align: 'center'
    });
    doc.text(`Generated on: ${new Date().toISOString()}`, {
      align: 'center'
    });

    // Finalize PDF
    doc.end();

    // Wait for PDF to be written
    await new Promise((resolve, reject) => {
      doc.on('end', resolve);
      doc.on('error', reject);
    });

    console.log(`‚úÖ Chat transcript PDF generated: ${filename}`);
    return filePath;

  } catch (error) {
    console.error('‚ùå Error generating chat transcript PDF:', error);
    throw error;
  }
};

/**
 * Generate a chat transcript as a TXT file
 * @param {string} userId1 - First user ID
 * @param {string} userId2 - Second user ID
 * @param {number} messageLimit - Number of recent messages to include (default: 50)
 * @returns {Promise<string>} - Path to the generated TXT file
 */
const generateChatTranscriptTXT = async (userId1, userId2, messageLimit = 50) => {
  try {
    console.log(`üìÑ Generating chat transcript TXT for users: ${userId1} and ${userId2}`);
    
    // Get user details
    const [user1, user2] = await Promise.all([
      User.findById(userId1).select('fname lname username email gender'),
      User.findById(userId2).select('fname lname username email gender')
    ]);

    if (!user1 || !user2) {
      throw new Error('Users not found');
    }

    // Get chat messages
    const messages = await Chat.find({
      $or: [
        { senderId: userId1, receiverId: userId2 },
        { senderId: userId2, receiverId: userId1 }
      ]
    })
    .populate('senderId', 'fname lname username')
    .populate('receiverId', 'fname lname username')
    .sort({ created: -1 })
    .limit(messageLimit);

    // Reverse to show oldest first
    messages.reverse();

    // Generate filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `chat-transcript-${user1.username}-${user2.username}-${timestamp}.txt`;
    const filePath = path.join(transcriptsDir, filename);

    // Generate text content
    let content = '';
    content += '='.repeat(80) + '\n';
    content += 'QULUUB CHAT TRANSCRIPT\n';
    content += 'Islamic Marriage Platform - Wali Supervision Report\n';
    content += '='.repeat(80) + '\n\n';

    content += 'PARTICIPANTS:\n';
    content += `‚Ä¢ ${user1.fname} ${user1.lname} (@${user1.username}) - ${user1.gender}\n`;
    content += `‚Ä¢ ${user2.fname} ${user2.lname} (@${user2.username}) - ${user2.gender}\n\n`;

    content += 'REPORT DETAILS:\n';
    content += `Report Generated: ${new Date().toLocaleString()}\n`;
    content += `Total Messages: ${messages.length}\n`;
    content += `Message Limit: Last ${messageLimit} messages\n\n`;

    content += 'ISLAMIC COMPLIANCE NOTICE:\n';
    content += 'üõ°Ô∏è This conversation has been monitored to ensure adherence to Islamic values and proper supervision.\n\n';

    content += 'CONVERSATION:\n';
    content += '-'.repeat(80) + '\n';

    if (messages.length === 0) {
      content += 'No messages found in this conversation.\n';
    } else {
      messages.forEach((message, index) => {
        const sender = message.senderId;
        const timestamp = new Date(message.created).toLocaleString();
        
        content += `[${timestamp}] ${sender.fname} ${sender.lname} (@${sender.username}):\n`;
        content += `${message.message}\n\n`;
      });
    }

    content += '-'.repeat(80) + '\n';
    content += 'This report was automatically generated by Quluub Islamic Marriage Platform\n';
    content += 'For Wali/Guardian supervision and Islamic compliance purposes\n';
    content += `Generated on: ${new Date().toISOString()}\n`;

    // Write to file
    fs.writeFileSync(filePath, content, 'utf8');

    console.log(`‚úÖ Chat transcript TXT generated: ${filename}`);
    return filePath;

  } catch (error) {
    console.error('‚ùå Error generating chat transcript TXT:', error);
    throw error;
  }
};

/**
 * Clean up old transcript files (older than 7 days)
 */
const cleanupOldTranscripts = () => {
  try {
    const files = fs.readdirSync(transcriptsDir);
    const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);

    files.forEach(file => {
      const filePath = path.join(transcriptsDir, file);
      const stats = fs.statSync(filePath);
      
      if (stats.mtime.getTime() < sevenDaysAgo) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Cleaned up old transcript: ${file}`);
      }
    });
  } catch (error) {
    console.error('‚ùå Error cleaning up old transcripts:', error);
  }
};

module.exports = {
  generateChatTranscriptPDF,
  generateChatTranscriptTXT,
  cleanupOldTranscripts
};
